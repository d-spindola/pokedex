import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { Fragment } from 'react'
import FilterContainer from '../components/layouts/home/FilterContainer'
import HomePageMainLayout from '../components/layouts/home/HomePageMainLayout'
import PokemonCardLink from '../components/PokemonCardLink'
import PokemonGridList from '../components/PokemonGridList'
import { getManyPokemons, getPokemon } from '../lib/api'
import { PokemonPayload } from '../lib/types'
import { Pokemon } from '../types/api'
const Colorthief = require('colorthief')

interface HomePageProps {
  pokemons: Pokemon[]
}

const Home: NextPage<HomePageProps> = ({ pokemons }) => {
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <HomePageMainLayout>
        <header>
          <div>
            <Image src="/logo.svg" width={32} height={32} />
            <p>Pokedx</p>
          </div>
        </header>

        <FilterContainer></FilterContainer>

        <div>
          <PokemonGridList>
            <Fragment>
              {pokemons.map((p) => (
                <PokemonCardLink
                  key={p.name}
                  pokemonName={p.name}
                  id={p.name}
                  types={[]}
                  dominantColor={p.dominantColor}
                  sprites={p.sprites}
                />
              ))}
            </Fragment>
          </PokemonGridList>
        </div>
      </HomePageMainLayout>
    </div>
  )
}

const fetchPokemonMetadadata = async (
  pokemon: PokemonPayload,
  colorFunc: (str: string, quality: number) => [string, string, string],
) => {
  const { sprites } = await getPokemon(pokemon.name)
  const pokemonDominantColor = await colorFunc(sprites.front_default, 50)

  return {
    ...pokemon,
    dominantColor: pokemonDominantColor,
    sprites,
  }
}

export const getServerSideProps = async () => {
  const pokemons = await getManyPokemons()

  const pokemonsWithColors = await Promise.all(
    pokemons.data.results.map(async (p: PokemonPayload) =>
      fetchPokemonMetadadata(p, Colorthief.getColor),
    ),
  )

  return {
    props: {
      pokemons: pokemonsWithColors,
    },
  }
}

export default Home
